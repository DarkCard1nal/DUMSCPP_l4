#pragma once
#ifndef PGMA_IMAGE_HPP
#define PGMA_IMAGE_HPP
#include "image.hpp"
#include <fstream>
#include <sstream>
#include <stdexcept>
#include <iostream>

class PGMAImage : public Image
{
public:
	PGMAImage(size_t rows, size_t cols) : Image(rows, cols) {}

	bool load(const std::string &filePath) override
	{
		std::ifstream file(filePath);
		if (!file.is_open()) return false;

		std::string line, format;
		std::getline(file, format);
		format.erase(format.find_last_not_of(" \t\r\n") + 1);
		if (format != "P2") return false;

		while (std::getline(file, line))
		{
			if (line[0] != '#') break;
		}

		std::istringstream dimensions(line);
		dimensions >> cols >> rows;

		int maxVal;
		file >> maxVal;

		pixels.resize(rows * cols);
		for (size_t i = 0; i < rows * cols; ++i)
		{
			if (!(file >> pixels[i])) return false;
		}

		return true;
	}

	void save(const std::string &filePath) const override
	{
		std::ofstream file(filePath);
		if (!file.is_open()) throw std::runtime_error("Unable to open file");

		file << "P2\n";
		file << "# Generated by Image class\n";
		file << cols << " " << rows << "\n255\n";

		for (size_t i = 0; i < rows; ++i)
		{
			for (size_t j = 0; j < cols; ++j)
			{
				file << pixels[i * cols + j] << " ";
			}
			file << "\n";
		}
	}
};
#endif // PGMA_IMAGE_HPP
